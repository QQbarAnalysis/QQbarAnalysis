#include <TPaveStats.h>
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TString.h>
#include <iostream>
#include <TFitResult.h>
#include <TF1.h>
#include <TSpectrum.h>
#include <sstream>
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>
#include "TH1.h"
#include "TF1.h"
#include "TROOT.h"
#include "TStyle.h"
#include "TMath.h"
#include "TSystemFile.h"
#include "TLine.h"
#include "../style/Style.C"
#include "../style/Labels.C"


void draw_sig_bkg() {

  SetIrlesStyle();
  gStyle->SetOptFit(0); 
  gStyle->SetOptStat(0);
  gStyle->SetOptTitle(1);
  gStyle->SetTitleX(0.25); 
  gStyle->SetTitleY(1); 

  gStyle->SetTitleBorderSize(0);
  gStyle->SetTitleStyle(0);
  gStyle->SetMarkerSize(0);
  gStyle->SetLegendFont(42);

    
  cout<<" ######################## "<<endl;
  cout<<"Left Handed polarization "<< endl;

  TString pol="eR";
 
  TFile *f = new TFile("../output/kt/bbbar_genkt_restorer_cuts6_250GeV_"+pol+"_btag1_0.9_btag2_0.2_nbins40.root");
  TH1F *h_parton = (TH1F*)f->Get("parton");
  TH1F *h_reco = (TH1F*)f->Get("reco");
  TH1F *h_bkg_qq = (TH1F*)f->Get("bkg_qq");
  TH1F *h_bkg_recoil = (TH1F*)f->Get("bkg_recoil");

  f = new TFile("../output/kt/bkg_ZZ_genkt_restorer_cuts6_250GeV_"+pol+"_btag1_0.9_btag2_0.2_nbins40.root");
  TH1F *h_bkg_zz = (TH1F*)f->Get("reco");

  f = new TFile("../output/kt/bkg_WW_genkt_restorer_cuts6_250GeV_"+pol+"_btag1_0.9_btag2_0.2_nbins40.root");
  TH1F *h_bkg_ww = (TH1F*)f->Get("reco");

  f = new TFile("../output/kt/bkg_HZ_genkt_restorer_cuts6_250GeV_"+pol+"_btag1_0.9_btag2_0.2_nbins40.root");
  TH1F *h_bkg_hz = (TH1F*)f->Get("reco");

  if(pol=="eL") {
    h_bkg_qq->Scale(250./266.5);
    h_bkg_recoil->Scale(250./266.5);
    h_reco->Scale(250./266.5);
    h_bkg_ww->Scale(250./72.2);
    h_bkg_zz->Scale(250./1000.);
    h_bkg_hz->Scale(250./1000.);
  }

  if(pol=="eR") {
    h_bkg_qq->Scale(250./276.9);
    h_bkg_recoil->Scale(250./276.9);
    h_reco->Scale(250./276.9);
    h_bkg_ww->Scale(250./72.2);
    h_bkg_zz->Scale(250./1000.);
    h_bkg_hz->Scale(250./1000.);
  }

  double reco=100.*h_reco->Integral()/h_parton->Integral();
  double qq=100.*h_bkg_qq->Integral()/h_reco->Integral();
  double recoil=100.*h_bkg_recoil->Integral()/h_reco->Integral();
  double zz=100.*h_bkg_zz->Integral()/h_reco->Integral();
  double ww=100.*h_bkg_ww->Integral()/h_reco->Integral();
  double hz=100.*h_bkg_hz->Integral()/h_reco->Integral();

  h_reco->Add(h_bkg_qq);
  h_reco->Add(h_bkg_recoil);
  h_reco->Add(h_bkg_zz);
  h_reco->Add(h_bkg_ww);
  h_reco->Add(h_bkg_hz);

  h_bkg_hz->Add(h_bkg_ww);
  h_bkg_hz->Add(h_bkg_zz);
  h_bkg_hz->Add(h_bkg_recoil);
  h_bkg_hz->Add(h_bkg_qq);

  h_bkg_ww->Add(h_bkg_zz);
  h_bkg_ww->Add(h_bkg_recoil);
  h_bkg_ww->Add(h_bkg_qq);

  h_bkg_zz->Add(h_bkg_recoil);
  h_bkg_zz->Add(h_bkg_qq);
  
  h_bkg_recoil->Add(h_bkg_qq);

  if(pol=="eL") {
    h_bkg_hz->Scale(10);
    h_bkg_zz->Scale(10);
    h_bkg_ww->Scale(10);
    h_bkg_qq->Scale(10);
    h_bkg_recoil->Scale(10);
  }

  if(pol=="eR") {
    h_bkg_hz->Scale(2);
    h_bkg_zz->Scale(2);
    h_bkg_ww->Scale(2);
    h_bkg_qq->Scale(2);
    h_bkg_recoil->Scale(2);
  }
  
  TCanvas * canvas = new TCanvas ("canvas","canvas",1000,800);
  canvas->cd(1);
  h_reco->GetXaxis()->SetTitle("cos(#theta)");
  h_reco->GetYaxis()->SetTitle("entries / 0.05 rad");
  h_reco->GetYaxis()->SetTitleOffset(1.6);
  h_reco->GetYaxis()->SetRangeUser(0,h_reco->GetMaximum()*1.1);

  h_reco->SetTitle("Before correction & bkg subtraction");
  h_reco->SetLineColor(1);
  h_reco->SetMarkerColor(1);
  h_reco->SetFillStyle(3002);
  h_reco->SetFillColor(1);
  h_reco->Draw("histo");

  h_bkg_hz->SetLineColor(3);
  h_bkg_hz->SetFillColor(3);
  h_bkg_hz->SetFillStyle(1001);
  h_bkg_hz->Draw("histosame");
  
  h_bkg_ww->SetLineColor(5);
  h_bkg_ww->SetFillColor(5);
  h_bkg_ww->SetFillStyle(1001);
  h_bkg_ww->Draw("histosame");
  
  h_bkg_zz->SetLineColor(2);
  h_bkg_zz->SetFillColor(2);
  h_bkg_zz->SetFillStyle(1001);
  h_bkg_zz->Draw("histosame");

  h_bkg_recoil->SetLineColor(4);
  h_bkg_recoil->SetFillColor(4);
  h_bkg_recoil->SetFillStyle(1001);
  h_bkg_recoil->Draw("histosame");
  
  h_bkg_qq->SetLineColor(6);
  h_bkg_qq->SetFillColor(6);
  h_bkg_qq->SetFillStyle(1001);
  h_bkg_qq->Draw("histosame");

  IRLESLabel(0.2,0.85,"",14);
  //  h_bkg_qq->
  TLegend *leg = new TLegend(0.2,0.6,0.55,0.8);
  if(pol=="eL")leg->SetHeader("e_{L}^{-}e_{R}^{+} #rightarrow b#bar{b}, 250GeV, 250fb^{-1}");
  if(pol=="eR")leg->SetHeader("e_{R}^{-}e_{L}^{+} #rightarrow b#bar{b}, 250GeV, 250fb^{-1}");
  if(pol=="eL") leg->AddEntry(h_reco,TString::Format("Signal, selection eff: %0.1f",29.8)+"%","lpe");
  if(pol=="eR") leg->AddEntry(h_reco,TString::Format("Signal, selection eff: %0.1f",29.8)+"%","lpe");
  leg->AddEntry(h_bkg_qq,TString::Format("q#bar{q} %0.2f",qq)+"%","f");
  leg->AddEntry(h_bkg_recoil,TString::Format("Radiative return %0.2f",recoil)+"%","f");
  leg->AddEntry(h_bkg_ww,TString::Format("WW %0.2f",ww)+"%","f");
  leg->AddEntry(h_bkg_zz,TString::Format("ZZ %0.2f",zz)+"%","f");
  leg->AddEntry(h_bkg_hz,TString::Format("HZ %0.2f",hz)+"%","f");
  leg->SetFillColor(0);
  leg->SetLineColor(0);
  leg->SetShadowColor(0);
  leg->Draw();

  TLatex l; //l.SetTextAlign(12); l.SetTextSize(tsize);                                                                                                                         
  l.SetNDC();
  l.SetTextFont(11);
  l.SetTextColor(1);
 
  if(pol=="eL") l.DrawLatex(0.7,0.3,"bkg x 10");
  if(pol=="eR") l.DrawLatex(0.7,0.3,"bkg x 2");

  
  
}

