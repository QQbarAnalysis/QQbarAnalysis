#include <TPaveStats.h>
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TString.h>
#include <iostream>
#include <TFitResult.h>
#include <TF1.h>
#include <TSpectrum.h>
#include <sstream>
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>
#include "TH1.h"
#include "TF1.h"
#include "TROOT.h"
#include "TStyle.h"
#include "TMath.h"
#include "TSystemFile.h"
#include "../../style/Style.C"
#include "../../style/Labels.C"

void Labels(TString pol="eL"){

  QQBARLabel(0.86,0.953,"");
  /*  if(i==0) QQBARLabel2(0.04,0.07, "[No Cuts]",kOrange+3);
  if(i==1) QQBARLabel2(0.04,0.07, "K_{reco,geom}<35 GeV",kOrange+3);
  if(i==2) QQBARLabel2(0.04,0.07, "K_{reco,geom}<35 GeV & m_{j_{1},j_{2}}>130 GeV",kOrange+3);
  if(i==3) QQBARLabel2(0.04,0.07, "K_{reco,geom}<35 GeV & 80GeV<m_{j_{1},j_{2}}<100GeV",kOrange+3);
  if(i==4) QQBARLabel2(0.04,0.07, "K_{reco,geom}<35 GeV & 150GeV<m_{j_{1},j_{2}}<160GeV",kOrange+3);
  if(i==5) QQBARLabel2(0.04,0.07, "K_{reco,geom}<35 GeV & m_{j_{1},j_{2}}>240 GeV",kOrange+3);
  if(i==6) {
    QQBARLabel2(0.04,0.085, "K_{reco,geom}<35 GeV & m_{j_{1},j_{2}}>130 GeV ",kOrange+3);
    QQBARLabel2(0.04,0.03, "& #frac{#Sigma_{i=nPFOs} E_{i}}{E_{jet}}>0.85 (both jets)",kOrange+3);
  }
  if(i==7) {
    QQBARLabel2(0.04,0.085, "K_{reco,geom}<35 GeV & m_{j_{1},j_{2}}>130 GeV ",kOrange+3);
    QQBARLabel2(0.04,0.03, "& #frac{#Sigma_{i=nPFOs} E_{i}}{E_{jet}}>0.85 & E_{jet}>55GeV (both jets)",kOrange+3);
  }
  if(i==8) {
    QQBARLabel2(0.04,0.085, "K_{reco,geom}<35 GeV & m_{j_{1},j_{2}}>130 GeV ",kOrange+3);
    QQBARLabel2(0.04,0.03, "& #frac{#Sigma_{i=nPFOs} E_{i}}{E_{jet}}>0.85 & E_{jet}>55GeV (both jets) &y_{23}<0.015",kOrange+3);
    }*/
  
  //  QQBARLabel2(0.04,0.08, "Preselection",kOrange+3);

  if(pol=="eL")QQBARLabel2(0.3,0.965, "e_{L}^{-}e_{R}^{+}#rightarrow b#bar{b}(K_{#gamma}<35 GeV, #scale[0.7]{#int}L=250fb^{-1})",kGray+2);
  if(pol=="eR")QQBARLabel2(0.3,0.965, "e_{R}^{-}e_{L}^{+}#rightarrow b#bar{b}(K_{#gamma}<35 GeV, #scale[0.7]{#int}L=250fb^{-1})",kGray+2);

}

void f1f2() {

  cout<< "cq qq radreturn ww zz hz "<<endl;
  TString pol="eL";
  TString kt="genkt_restorer_Kgamma35";//"_genkt";//"_tight_";
  
  //Efficiency y23.
  float bb_integral[100];
  float qq_integral[100];
  float cc_integral[100];
  float radreturn_integral[100];
  float zz_integral[100];
  float ww_integral[100];
  float hz_integral[100];

  TH1F *h_f_bb[3];
  TH1F *h_f_qq[3];
  TH1F *h_f_cc[3];
  TH1F *h_f_radreturn[3];
  TH1F *h_f_zz[3];
  TH1F *h_f_hz[3];
  TH1F *h_f_ww[3];
    
  for(int i=0; i<3; i++) {

  int cuts=i;
  if(i==0) cuts=5;
  if(i==1) cuts=13;
  if(i==2) cuts=14;

  TString sel="_";//"_tight_";
  TString folder=TString::Format("../output_20200427/selection_cuts%i_",cuts);

  TString filename = folder+"bbbar_"+kt+sel+"250GeV_"+pol+".root";
  cout<<filename<<endl;
  TFile *f = new TFile(filename);

  h_f_bb[i] = (TH1F*)f->Get(TString::Format("h_f%i_bb",i));
  h_f_cc[i] = (TH1F*)f->Get(TString::Format("h_f%i_cc",i));
  h_f_qq[i] =(TH1F*)f->Get(TString::Format("h_f%i_qq",i));

  filename = folder+"bbbar_radret_genkt_R125_Kgamma35"+sel+"250GeV_"+pol+".root";
  cout<<filename<<endl;
  TFile *fr = new TFile(filename);
  h_f_radreturn[i] = (TH1F*)fr->Get(TString::Format("h_f%i_radreturn",i));
  
  if(pol=="eL" ) { 
    h_f_bb[i]->Scale(250./266.5);
    h_f_cc[i]->Scale(250./266.5);
    h_f_qq[i]->Scale(250./266.5); 
    h_f_radreturn[i]->Scale(250./13.15);
  }

  if(pol=="eR" ) {
    h_f_bb[i]->Scale(250./276.9);
    h_f_qq[i]->Scale(250./276.9);
    h_f_cc[i]->Scale(250./276.9);   
    h_f_radreturn[i]->Scale(250./19.9);   
  }
  
  TFile *f2 = new TFile(folder+"bkg_"+kt+"_WW"+sel+"250GeV_"+pol+".root");
  h_f_ww[i] = (TH1F*)f2->Get(TString::Format("h_f%i_bb",i));
  if(h_f_ww[i]==NULL) h_f_ww[i]=new TH1F("ww","ww",20,0,1);

  if(pol=="eL" && h_f_hz[i]!=NULL) {
    h_f_ww[i]->Scale(250./72.2);
  }

  TFile *f3 = new TFile(folder+"bkg_"+kt+"_ZZ"+sel+"250GeV_"+pol+".root");
  h_f_zz[i] = (TH1F*)f3->Get(TString::Format("h_f%i_bb",i));
  if(h_f_zz[i]==NULL) h_f_zz[i]=new TH1F("zz","zz",20,0,1);
 
 
  
  TFile *f4 = new TFile(folder+"bkg_"+kt+"_HZ"+sel+"250GeV_"+pol+".root");
  h_f_hz[i] = (TH1F*)f4->Get(TString::Format("h_f%i_bb",i));
  if(h_f_hz[i]==NULL) h_f_hz[i]=new TH1F("hz","z",20,0,1);
  else {
    if(pol=="eL")h_f_hz[i]->Scale(250./353.);
    if(pol=="eR")h_f_hz[i]->Scale(250./550.);
  }


  //Efficiency costheta.
  bb_integral[i+1]=0;
  qq_integral[i+1]=0;
  cc_integral[i+1]=0;
  radreturn_integral[i+1]=0;
  zz_integral[i+1]=0;
  ww_integral[i+1]=0;
  hz_integral[i+1]=0;

  bb_integral[i+1]=h_f_bb[i]->Integral();
  qq_integral[i+1]=h_f_qq[i]->Integral();
  cc_integral[i+1]=h_f_cc[i]->Integral();
  radreturn_integral[i+1]=h_f_radreturn[i]->Integral();
  zz_integral[i+1]=h_f_zz[i]->Integral();
  hz_integral[i+1]=h_f_hz[i]->Integral();
  ww_integral[i+1]=h_f_ww[i]->Integral();

  cout<< "selection"<<cuts<<" "<< bb_integral[i+1]<<" "<<cc_integral[i+1]<<" "<<qq_integral[i+1]<<" "<<radreturn_integral[i+1]<<" "<< zz_integral[i+1]<<" "<< ww_integral[i+1]<<" "<< hz_integral[i+1]<<endl;


  }
  
  SetQQbarStyle();
  gStyle->SetOptFit(0); 
  gStyle->SetOptStat(0);
  gStyle->SetOptTitle(0);
  
  gStyle->SetTitleBorderSize(0);
  gStyle->SetTitleStyle(0);
  gStyle->SetTitleX(0.2);
  gStyle->SetMarkerSize(1.5);
  TGaxis::SetMaxDigits(2); 

 
  // Sum bkgrounds
  TH1F *h_bkg[3];
  h_bkg[0] = new TH1F("bkg0","bkg0",20,0,1);
  h_bkg[1] = new TH1F("bkg1","bkg1",20,0,1);
  h_bkg[2] = new TH1F("bkg2","bkg2",20,0,1);

  h_bkg[0]->Add(h_f_radreturn[0]);
  h_bkg[0]->Add(h_f_hz[0]);
  h_bkg[0]->Add(h_f_zz[0]);
  h_bkg[0]->Add(h_f_ww[0]);

  h_bkg[1]->Add(h_f_radreturn[1]);
  h_bkg[1]->Add(h_f_hz[1]);
  h_bkg[1]->Add(h_f_zz[1]);
  h_bkg[1]->Add(h_f_ww[1]);

  h_bkg[2]->Add(h_f_radreturn[2]);
  h_bkg[2]->Add(h_f_hz[2]);
  h_bkg[2]->Add(h_f_zz[2]);
  h_bkg[2]->Add(h_f_ww[2]);
  
  h_f_bb[0]->Add(h_f_cc[0]);
  h_f_bb[0]->Add(h_f_qq[0]);
  h_f_bb[0]->Add(h_bkg[0]);

  // Ratios f1
  h_f_bb[1]->Divide(h_f_bb[0]);
  h_f_cc[1]->Divide(h_f_bb[0]);
  h_f_qq[1]->Divide(h_f_bb[0]);
  h_bkg[1]->Divide(h_f_bb[0]);
  h_f_radreturn[1]->Divide(h_f_bb[0]);
  h_f_hz[1]->Divide(h_f_bb[0]);
  h_f_zz[1]->Divide(h_f_bb[0]);
  h_f_ww[1]->Divide(h_f_bb[0]);
  
  // Ratios f2
  h_f_bb[2]->Divide(h_f_bb[0]);
  h_f_cc[2]->Divide(h_f_bb[0]);
  h_f_qq[2]->Divide(h_f_bb[0]);
  h_bkg[2]->Divide(h_f_bb[0]);
  h_f_radreturn[2]->Divide(h_f_bb[0]);
  h_f_hz[2]->Divide(h_f_bb[0]);
  h_f_zz[2]->Divide(h_f_bb[0]);
  h_f_ww[2]->Divide(h_f_bb[0]);
  
  
  TCanvas * canvas1 = new TCanvas("f1_"+pol,"f1_"+pol,800,800);
  canvas1->cd(1);
  //  gPad->SetLogy();
  THStack * h_bkg1 = new THStack("Reco","Reco");
  h_f_hz[1]->SetLineColor(3);
  h_f_hz[1]->SetFillColor(3);
  h_f_hz[1]->SetFillStyle(3005);
 
  h_f_ww[1]->SetLineColor(kGray+2);
  h_f_ww[1]->SetFillColor(kGray+2);
  h_f_ww[1]->SetFillStyle(3006);
  
  h_f_zz[1]->SetLineColor(2);
  h_f_zz[1]->SetFillColor(2);
  h_f_zz[1]->SetFillStyle(3001);

  h_f_radreturn[1]->SetLineColor(4);
  h_f_radreturn[1]->SetFillColor(4);
  h_f_radreturn[1]->SetFillStyle(3004);

  h_bkg[1]->SetLineColor(4);
  h_bkg[1]->SetFillColor(4);
  h_bkg[1]->SetFillStyle(3004);
  
  h_f_qq[1]->SetLineColor(6);
  h_f_qq[1]->SetFillColor(6);
  h_f_qq[1]->SetFillStyle(1001);

  h_f_cc[1]->SetLineColor(kGray);
  h_f_cc[1]->SetFillColor(kGray);
  h_f_cc[1]->SetFillStyle(1001);

  /*  h_bkg1->Add(h_f_radreturn[1]);
  h_bkg1->Add(h_f_hz[1]);
  h_bkg1->Add(h_f_ww[1]);
  h_bkg1->Add(h_f_zz[1]);*/
  h_bkg1->Add(h_bkg[1]);
  h_bkg1->Add(h_f_qq[1]);
  h_bkg1->Add(h_f_cc[1]);
  h_bkg1->Add(h_f_bb[1]);

  h_bkg1->Draw("histo");
  h_bkg1->GetYaxis()->SetTitle("f_{1}");
  h_bkg1->GetXaxis()->SetTitle("|cos#theta_{q}|");
  h_bkg1->GetYaxis()->SetTitleOffset(1.5);
  h_bkg1->GetXaxis()->SetRangeUser(0,1);
  h_bkg1->GetYaxis()->SetRangeUser(0,0.2);
  gPad->Update();

  Labels(pol);

  double x1=0.2, y1=0.45, x2=0.3, y2=0.7;
  TLegend *leg1 = new TLegend(x1,y1+0.05,x2,y2);
  leg1->SetTextSize(0.035);
  leg1->SetTextFont(42);
  leg1->AddEntry(h_f_bb[1],"#font[122]{e}_{b}R^{cont.}_{b}","l");
  leg1->AddEntry(h_f_cc[1],"#font[122]{e}_{c}R^{cont.}_{c}","lf");//#epsilon_{c}#font[42]{R_{c}}","lf");
  leg1->AddEntry(h_f_qq[1],"#font[122]{e}_{uds}(1-R^{cont.}_{b}-R^{cont.}_{c})","lf");//#epsilon_{uds}#font[42]{(1-R_{b}-R_{c})}","lf");
  leg1->AddEntry(h_bkg[1],"F(#font[122]{e}_{b},#font[122]{e}_{c},#font[122]{e}_{uds},BKGs)","lf");//#epsilon_{uds}#font[42]{(1-R_{b}-R_{c})}","lf");
  leg1->SetFillStyle(0);
  leg1->SetLineWidth(0);
  leg1->SetLineColor(0);
  //  leg1->SetShadowColor(0);
  leg1->SetBorderSize(0);
  leg1->Draw();


  canvas1->Print(TString::Format("f1_%s.eps",pol.Data()));
  

  TCanvas * canvas2 = new TCanvas("f2_"+pol,"f2_"+pol,800,800);
  canvas2->cd(2);

  THStack * h_bkg2 = new THStack("Reco","Reco");
  h_f_hz[2]->SetLineColor(3);
  h_f_hz[2]->SetFillColor(3);
  h_f_hz[2]->SetFillStyle(3005);
 
  h_f_ww[2]->SetLineColor(kGray+2);
  h_f_ww[2]->SetFillColor(kGray+2);
  h_f_ww[2]->SetFillStyle(3006);
  
  h_f_zz[2]->SetLineColor(2);
  h_f_zz[2]->SetFillColor(2);
  h_f_zz[2]->SetFillStyle(3001);

  h_f_radreturn[2]->SetLineColor(4);
  h_f_radreturn[2]->SetFillColor(4);
  h_f_radreturn[2]->SetFillStyle(3004);

  h_bkg[2]->SetLineColor(4);
  h_bkg[2]->SetFillColor(4);
  h_bkg[2]->SetFillStyle(3004);
  
  h_f_qq[2]->SetLineColor(6);
  h_f_qq[2]->SetFillColor(6);
  h_f_qq[2]->SetFillStyle(1001);

  h_f_cc[2]->SetLineColor(kGray);
  h_f_cc[2]->SetFillColor(kGray);
  h_f_cc[2]->SetFillStyle(1001);

  /*  h_bkg2->Add(h_f_radreturn[2]);
  h_bkg2->Add(h_f_hz[2]);
  h_bkg2->Add(h_f_ww[2]);
  h_bkg2->Add(h_f_zz[2]);*/
  h_bkg2->Add(h_bkg[2]);
  h_bkg2->Add(h_f_qq[2]);
  h_bkg2->Add(h_f_cc[2]);
  h_bkg2->Add(h_f_bb[2]);

  h_bkg2->Draw("histo");
  h_bkg2->GetYaxis()->SetTitle("f_{2}");
  h_bkg2->GetXaxis()->SetTitle("|cos#theta_{q}|");
  h_bkg2->GetYaxis()->SetTitleOffset(1.5);
  h_bkg2->GetXaxis()->SetRangeUser(0,1);
  h_bkg2->GetYaxis()->SetRangeUser(0,0.2);
  gPad->Update();


  x1=0.2, y1=0.45, x2=0.3, y2=0.7;
  
  TLegend *leg2 = new TLegend(x1,y1+0.05,x2,y2);
  leg2->SetTextSize(0.035);
  leg2->SetTextFont(42);
  leg2->AddEntry(h_f_bb[2],"#font[122]{e}^{2}_{b}(1+#font[122]{r}_{b})R^{cont.}_{b}","l");
  leg2->AddEntry(h_f_cc[2],"#font[122]{e}^{2}_{c}R^{cont.}_{c}","lf");//#epsilon_{c}#font[42]{R_{c}}","lf");
  leg2->AddEntry(h_f_qq[2],"#font[122]{e}^{2}_{uds}(1-R^{cont.}_{b}-R^{cont.}_{c})","lf");//#epsilon_{uds}#font[42]{(1-R_{b}-R_{c})}","lf");
  leg2->AddEntry(h_bkg[2],"F(#font[122]{e}^{2}_{b},#font[122]{e}^{2}_{c},#font[122]{e}^{2}_{uds},BKGs)","lf");//#epsilon_{uds}#font[42]{(1-R_{b}-R_{c})}","lf");
  leg2->SetFillStyle(0);
  leg2->SetLineWidth(0);
  leg2->SetLineColor(0);
  //  leg1->SetShadowColor(0);
  leg2->SetBorderSize(0);
  leg2->Draw();

  Labels(pol);

  canvas2->Print(TString::Format("f2_%s.eps",pol.Data()));




}
